Each generated HTML is associated with minimal JavaScript code necessary for that page. 
When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. 
(This process is called hydration.)
====
Static Generation (Recommended): The HTML is generated at build time and will be reused on each request.

Server-side Rendering: The HTML is generated on each request.
========
We recommend using Static Generation over Server-side Rendering for performance reasons. 
Statically generated pages can be cached by CDN with no extra configuration to boost performance. 
However, in some cases, Server-side Rendering might be the only option.
=========
When should I use Static Generation?
We recommend using Static Generation (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.

You can use Static Generation for many types of pages, including:

Marketing pages
Blog posts and portfolios
E-commerce product listings
Help and documentation
You should ask yourself: "Can I pre-render this page ahead of a user's request?" If the answer is yes, then you should choose Static Generation.

On the other hand, Static Generation is not a good idea if you cannot pre-render a page ahead of a user's request. 
Maybe your page shows frequently updated data, and the page content changes on every request.

In cases like this, you can do one of the following:

Use Static Generation with Client-side Rendering: You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. 
To learn more about this approach, check out the Data Fetching documentation.
Use Server-Side Rendering: Next.js pre-renders a page on each request.
 It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. 
We'll talk about this approach below.
===========================
Also referred to as "SSR" or "Dynamic Rendering".
If a page uses Server-side Rendering, the page HTML is generated on each request.
=====
getServerSideProps only runs on server-side and never runs on the browser. 
======
getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance
Because getStaticProps runs at build time, it does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. 
If you need access to the request for your page, consider using Middleware in addition to getStaticProps.
As getStaticProps runs only on the server-side, it will never run on the client-side. 
Statically generates both HTML and JSON
When a page with getStaticProps is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running getStaticProps.
This JSON file will be used in client-side routing through next/link or next/router. 

==================

getServerSideProps
If you export a function called getServerSideProps (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps.
getServerSideProps only runs on server-side and never runs on the browser. 
